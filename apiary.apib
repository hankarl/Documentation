FORMAT: 1A
HOST: http://polls.apiblueprint.org/huggy/v3

# Huggy API v3

Bem-vindo à API Huggy. Com ele, você pode gerenciar todos os agentes, contatos e atender seus clientes, enviar e receber mensagens. Esta API permite que você realize programaticamente ações na conta da sua empresa.

Nossa API nativamente suporta o formato:
- REST
    
    O sistema deve fazer uma solicitação para o URL <a href="https://huggyapiv30.docs.apiary.io/#">Huggy API v3</a>, enviando os parâmetros por GET, POST, PUT or DELETE. Para cada solicitação, a resposta será um objeto JSON, que é detalhado ao longo desta documentação.

# Autenticação

Você deve fornecer um cabeçalho de Autorização em cada solicitação feita, seguindo o formato:
    
    `X-Authorization: Bearer xxxxxxxxxx`
    
Onde os caracteres `xxxxxxx` significam o token da API da sua empresa ou o token fornecido quando o aplicativo estiver instalado em uma empresa terceirizada.

Você pode obter seu token de API no painel Huggy, em configurações, opção de API no campo `Chave de acesso`.

#Headers

- Todos os pedidos também devem incluir os seguintes headers:

        Content-Type:application/json
        X-Authorization: Bearer xxxxxxxxxx

# Respostas usuais do servidor:
        
- 200 `OK` - o pedido foi bem sucedido.

- 201 `Created` - o pedido foi bem sucedido e um cliente, contato ou bate-papo foi criado.

- 204 `Modified` - o pedido foi bem sucedido e um recurso foi modificado.

- 400 `Bad Request` - o pedido não pôde ser entendido ou faltava os parâmetros necessários. Verifique o motivo na resposta do corpo.
        
- 401 `Unauthorized` - falha na autenticação ou o usuário não possui permissões para a operação solicitada. Verifique o token da API, ele pode estar errado.

- 404 `Not Found` - o recurso não foi encontrado. Isso pode ser causado por uma ID não existente.

- 501 `Request Failed` - pode ser causada por um método de solicitação incorreto.

# Group Chats

## Chat Collection [/chats]     

### List all chats [GET]    

Limitado a 20 resultados. Os recursos remanescentes (se existir) podem ser acessados com um parâmetro de consulta `?page=1` em url pedido. Esta paginação começa em `0` (primeira página). Se a página solicitada não existir, uma matriz vazia `[]` é retornada no corpo da solicitação.

+ Response 200 (application/json)


        [
          {
            "id": 1,
            "name": "John Doe"
          },
          {
            "id": 2,
            "name": "Clark Parker"
          }
          
        ]

+ Response 404 (application/json)

            {
             "message": "Page not found"
            }
   
## Create a chat Collection [/chats/{channel}]

+ Parameters
 + channel (required, string, `whatsapp`)... name of the channel

### Create a new chat [POST]

The channels of chat can be:    

  
  1: whatsapp      
  2: telegram      
  3: email   
   
+ Request (appliation/json)

      + Headers     
      Accept: application/json
      X-Authorization: Bearer xxxxxxxxxx
 
 + Body
  
    {
        “name”: “John Doe”,
        “phone”: 551170707070,
        “email”: “john@doe.com”,
        “message”: “Hello!”,
        “department”: 1,
        “subject”: “Create a new chat”
    }
    
+ Response 200 (application/json)   
    
  [ 
    {
       “name”: “John Doe”,
       “phone”: 551170707070,
       “email”: “john@doe.com”,
       “message”: “Hello!”,
       “department”: 1,
       “subject”: “Create a new chat”
    } 
  ]
  
+ Request (appliation/json)

  + Headers
 
  Accept: application/json
  X-Authorization: Bearer xxxxxxxxxx

 + Body
    {
       “name”: “John Doe”,
       “phone”: 551170707070,
       “email”: “john@doe.com”,
       “message”: “Hello!”,
       “department”: 1,
       “subject”: “Create a new chat”,
       “channelID”: 123 (more than an email)
    }
+ Response 200 (application/json)
 
 [
    {
       “name”: “John Doe”,
       “phone”: 551170707070,
       “email”: “john@doe.com”,
       “message”: “Hello!”,
       “department”: 1,
       “subject”: “Create a new chat”,
       “channelID”: 123 (more than an email)
    }
]

## View a chat Collection [/chat/{chat_id}]
+ Parameters 
  + chat_id (required, number)... número identificador

### View a char details [GET]
Mediante um `ID`, obtenha os dados detalhados do chat.
+ Request (application/json)

+ Headers
  Accept: application/json
  X-Authorization: Bearer xxxxxxxxxx

+ Body
        {
         "chat_id": "1";
        }
        
+ Response 200 (application/json)
    
    [
       {
        “name”: “John Doe”,
        “phone”: 551170707070,
        “email”: “john@doe.com”,
        }
    ]

## Chat messages Collection [/chat/{chat_id}/messages]
+ Parameters 
  + chat_id (required, number)... número identificador      

### List chat Collection [GET]  

+ Request Text (application/json)

+ Headers
  Accept: application/json
  X-Authorization: Bearer xxxxxxxxxx

+ Body
        {
         "Text": "Huggy API v3"
        }
        
+ Response 200 (application/json)
+ Response 201 (application/json)
+ Response 404 (application/json)   

### Add new messages in chat [POST]
Encontre dentro dessa coleção recursos para listar seu chat e obter informações ou adicionar uma nova mensagem
+ Request (application/json)

+ Headers
  Accept: application/json
  X-Authorization: Bearer xxxxxxxxxx

+ Body
     
     {
     "Text": "Hello"...
     }

+ Response 200 (application/json)
+ Response 2001 (application/json)

## Transfer a chat Collection [/chat/{chat_id}/transfer]

+ Parameters 
  + chat_id (required, number)... número identificador

### Transfer a chat for agent [POST]

Envie uma mensagem de confirmação utilizando requisição `POST`

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx

    + Body
    {
     "agentID": "1234",
     "message": "transferred successfully"
    }
+ Response 200 (application/json)

## Add agent collection [/chat/{chat_id}/addAgent]
+ Parameters 
  + chat_id (required, number)... número identificadorid (required, number)... número identificador      

### Add an agent in char [POST]

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx
    
    + Body
    {
     "agentID": "1234"
    }
+ Response 200 (application/json)

## Assign a chat Collection [/chats/{chat_id}/AssignToMe]

+ Parameters 
  + chat_id (required, number)... número identificador      

### Assign a chat for agent [PUT]

Edite um recurso atribuindo um bate-papo para o agente `ID`

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx

+ Body
    {  "id": 63,
       "name": "john Doe",
       "email": "john@doe.com
    }
+ Response 204 (application/json)

## Mark read Collection [/chats/{chat_is}/read]

+ Parameters 
  + chat_id (required, number)... número identificador    

### Mark read on chat messages [PUT]

Marcar leitura em mensagem de chat. Um `ID` será requerido para isso.
+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx

    + Body
    {
    "id": 34,
    "message": "Hello, my name is John"
    }
+ Response 204 (application/json)

## Update a Chat Collection [/chats/{chat_id}/department]

+ Parameters 
  + chat_id (required, number)... número identificador

### Updates a chat department [PUT]

Atualize o recurso departamento utilizando uma requisição `PUT`. Um `ID` será necessário para especificar sua atualização.

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx

    + Body
    
    {
    "department": "1"
    }
    
+ Response 204 (application/json)

## Close a chat Collection [/chats/{chat_id}/close]

+ Parameters 
  + chat_id (required, number)... número identificador

### Close a chat [PUT]
Feche um chat passando o `ID` no corpo da requisição.

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx
    
    + Body
    {
    "chat_number": "2";
    }

// uma conexão bem sucedida em que não haverá nenhuma conteudo evolvido pelo servidor.
+ Response 204 (application/json)

## Reopen a char Collection [/chats/{chat_id}/reopen]

+ Parameters 
  + chat_id (required, number)... número identificador

### Reope a chat [PUT]
+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx
    
    + Body
    {
    "chat_number": "2";
    }
+ Response 204 (application/json)

## Moves a chat Collection [/chats/{chat_id}/queue]
+ Parameters 
  + chat_id (required, number)... número identificador

### Moves a chat for queue [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx
    
    + Body
    {
     "chat_number": 2,
     "name": "John",
     "phone": 9999999999
    }
    
    
+ Response 204 (application/json)

## Changes a chat Collection [/chats/{chat_id}/situation]

+ Parameters 
  + chat_id (required, number)... número identificador

### Changes a chat situation [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx
    
    + Body
    {
    "situation": "wait_for_chat"
    }
+ Response 204 (application/json)
    

## List a chat Collection [/chats/{chat_id}/tags]
+ Parameters 
  + chat_id (required, number)... número identificador

### List a chat tags [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    X-Authorization: Bearer xxxxxxxxxx
    
    + Body
    {
     "tags": "tag1", "tag2", "tag3"
    }
    
+ Response 204 (application/json)

## List chats Collection [/chats/?situation=wait_for_chat]

### List chats on queue[GET]

+ Response 200 (application/json)
    [
        {
         "situation": "wait_for_chat"
        }
    ]

### List chats in attendance [GET]
+ Response 200 (application/json)
    [
        {
         "situation": "wait_for_chat"
        }
    ]