FORMAT: 1A
HOST: http://polls.apiblueprint.org/huggy/v3/

# Huggy API v3

Welcome to the Huggy API. With it you can managing all agents, contacts and attend your customers, sending and receiving messages. 
This API allows you to programmatically perform actions on your Company account.

# Group Chats

## Chat Collection [/chats]     

### List all chats [GET]    

Limited to 20 results. The remaining resources (if exists) can be accessed 
with a query parameter `?page=1` on request url. This pagination begins at `0`
(first page). If the requested page does not exist, an empty array `[]` is returned
in the request body.

+ Response 404 (application/json)

            {
             "message": "Page not found"
            }
   
## Create a chat Collection [/chats/{channel}]

+ Parameters
 + channel (required, string, `whatsapp`)... name of the channel

### Create a new chat [POST]

The channels of chat can be:    

   1: whatsapp      
   2: telegram      
   3: email     
   
+ Request (appliation/json)

      + Headers     
      Accept: application/json
 
 + Body
  
    {
        “name”: “John Doe”,
        “phone”: 551170707070,
        “email”: “john@doe.com”,
        “message”: “Hello!”,
        “department”: 1,
        “subject”: “Create a new chat”
    }
    
+ Response 200 (application/json)   
    
  [ 
    {
       “name”: “John Doe”,
       “phone”: 551170707070,
       “email”: “john@doe.com”,
       “message”: “Hello!”,
       “department”: 1,
       “subject”: “Create a new chat”
    } 
  ]
  
+ Request (appliation/json)

  + Headers
 
  Accept: application/json

 + Body
    {
       “name”: “John Doe”,
       “phone”: 551170707070,
       “email”: “john@doe.com”,
       “message”: “Hello!”,
       “department”: 1,
       “subject”: “Create a new chat”,
       “channelID”: 123 (more than an email)
    }
+ Response 200 (application/json)
 
 [
    {
       “name”: “John Doe”,
       “phone”: 551170707070,
       “email”: “john@doe.com”,
       “message”: “Hello!”,
       “department”: 1,
       “subject”: “Create a new chat”,
       “channelID”: 123 (more than an email)
    }
]

## View a chat Collection [/chat/{chat_id}]
+ Parameters 
  + chat_id (required, number)... número identificador

### View a char details [GET]
Mediante um ID, `chat_id`, obtenha os dados detalhados do chat.
+ Request (application/json)

+ Headers
  Accept: application/json

+ Body
        {
         "chat_id": "1";
        }
        
+ Response 200 (application/json)
    
    [
       {
        “name”: “John Doe”,
        “phone”: 551170707070,
        “email”: “john@doe.com”,
        }
    ]

## Chat messages Collection [/chat/{chat_id}/messages]
+ Parameters 
  + chat_id (required, number)... número identificador      

### List chat Collection [GET]  

+ Request Text (application/json)

+ Headers
  Accept: application/json

+ Body
        {
         "Text": "Huggy API v3"
        }
        
+ Response 200 (application/json)
+ Response 201 (application/json)
+ Response 404 (application/json)   

### Add new messages in chat [POST]
Encontre dentro dessa coleção recursos para listar seu chat e obter uma simples informações ou adicionar uma nova mensagem
+ Request (application/json)

+ Headers
  Accept: application/json

+ Body
     
     {
     "Text": "Hello"...
     }

+ Response 200 (application/json

[
    {
     "Text": "Hello"...
    }
]

## Transfer a chat Collection [/chat/{chat_id}/transfer]

+ Parameters 
  + chat_id (required, number)... número identificador

### Transfer a chat for agent [POST]

+ Request (application/json)

    + Headers
    Accept: application/json

    + Body
    {
     "agentID": "1234",
     "message": "transferred successfully"
    }
+ Response 200 (application/json)
    [
        {
         "agentID": 1234,
         "message": "transferred successfully"
        }
    ]   

## Add agent collection [/chat/{chat_id}/addAgent]
+ Parameters 
  + chatid (required, number)... número identificador      

### Add an agent in char [POST]

+ Request (application/json)

    + Headers
    Accept: application/json
    
    + Body
    {
     "agentID": "1234"
    }
+ Response 200 (application/json)

[
    {
     "agentID": "1234"
    }
]

## Assign a chat Collection [/chats/{chat_id}/AssignToMe]

+ Parameters 
  + chat_id (required, number)... número identificador      

### Assign a chat for agent [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json 

+ Body
    {
       "name": "john Doe",
       "email": "john@doe.com
    }
+ Response 204 (application/json)

## Mark read Collection [/chats/{chat_is}/read]

+ Parameters 
  + chat_id (required, number)... número identificador    

### Mark read on chat messages [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json

    + Body
    {
    "message": "Hello, my name is John"
    }
+ Response 204 (application/json)

## Update a Chat Collection [/chats/{chat_id}/department]

+ Parameters 
  + chat_id (required, number)... número identificador

### Updates a chat department [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json

    + Body
    
    {
    "department": "1"
    }
    
+ Response 204 (application/json)

## Close a chat Collection [/chats/{chat_id}/close]

+ Parameters 
  + chat_id (required, number)... número identificador

### Close a chat [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    
    + Body
    {
    "chat_number": "2";
    }

+ Response 204 (application/json)

## Reopen a char Collection [/chats/{chat_id}/reopen]

+ Parameters 
  + chat_id (required, number)... número identificador

### Reope a chat [PUT]
+ Request (application/json)

    + Headers
    Accept: application/json
    
    + Body
    {
    "chat_number": "2";
    }
+ Response 204 (application/json)

## Moves a chat Collection [/chats/{chat_id}/queue]
+ Parameters 
  + chat_id (required, number)... número identificador

### Moves a chat for queue [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    
    + Body
    {
    }
    
+ Response 204 (application/json)

## Changes a chat Collection [/chats/{chat_id}/situation]

+ Parameters 
  + chat_id (required, number)... número identificador

### Chages a chat situation [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    
    + Body
    {
    "situation": "wait_for_chat"
    }
+ Response 200 (application/json)

## List a chat Collection [/chats/{chat_id}/tags]
+ Parameters 
  + chat_id (required, number)... número identificador

### List a chat tags [PUT]

+ Request (application/json)

    + Headers
    Accept: application/json
    
    + Body
    {
     "tags": "tag1", "tag2", "tag3"
    }
    
+ Response 200 (application/json)

[
    {
        "tags": [
           {"tag": "1"},
           {"tag": "2"},
           {"tag": "3"}
         ]
    }
]

## List chats Collection [/chats/?situation=wait_for_chat]

### List chats on queue[GET]

+ Response 200 (application/json)
[
    {
    "situation": "wait_for_chat"
    }
]

### List chats in attendance [GET]
+ Response 200 (application/json)
[
    {
    "situation": "wait_for_chat"
    }
]